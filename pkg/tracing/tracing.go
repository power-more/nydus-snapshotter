/*
   Copyright The containerd Authors.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package tracing

import (
	"context"
	"fmt"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

type Cancel func(err error)

// StartSpan starts child span in a context.
func StartSpan(ctx context.Context, opName string, opts ...trace.SpanStartOption) (context.Context, trace.Span, Cancel) {
	if parent := trace.SpanFromContext(ctx); parent != nil && parent.SpanContext().IsValid() {
		ctx, span := parent.TracerProvider().Tracer("").Start(ctx, opName, opts...)
		return ctx, span, func(err error) {
			StopSpanWithErr(span, err)
		}
	}
	ctx, span := otel.Tracer("").Start(ctx, opName, opts...)
	return ctx, span, func(err error) {
		StopSpanWithErr(span, err)
	}
}

// StopSpan ends the span specified
func StopSpan(span trace.Span) {
	span.End()
}

// StopSpanWithErr ends the span and records retErr in span
func StopSpanWithErr(span trace.Span, retErr error) {
	span.End()
	if retErr != nil {
		span.RecordError(retErr)
		span.SetStatus(codes.Error, retErr.Error())
	}
}

// TODO(chaofeng): After Golang Updates to 1.18, rewrite following section with generic function

// SetBool sets a KeyValue with a BOOL Value type.
func SetBool(span trace.Span, k string, v bool) {
	span.SetAttributes(attribute.Bool(k, v))
}

// SetBoolSlice sets a KeyValue with a BOOLSLICE Value type.
func SetBoolSlice(span trace.Span, k string, v []bool) {
	span.SetAttributes(attribute.BoolSlice(k, v))
}

// SetInt sets a KeyValue with an INT64 Value type.
func SetInt(span trace.Span, k string, v int) {
	span.SetAttributes(attribute.Int(k, v))
}

// SetIntSlice sets a KeyValue with an INT64SLICE Value type.
func SetIntSlice(span trace.Span, k string, v []int) {
	span.SetAttributes(attribute.IntSlice(k, v))
}

// SetInt64 sets a KeyValue with an INT64 Value type.
func SetInt64(span trace.Span, k string, v int64) {
	span.SetAttributes(attribute.Int64(k, v))
}

// SetInt64Slice sets a KeyValue with an INT64SLICE Value type.
func SetInt64Slice(span trace.Span, k string, v []int64) {
	span.SetAttributes(attribute.Int64Slice(k, v))
}

// SetFloat64 sets a KeyValue with a FLOAT64 Value type.
func SetFloat64(span trace.Span, k string, v float64) {
	span.SetAttributes(attribute.Float64(k, v))
}

// SetFloat64Slice sets a KeyValue with a FLOAT64SLICE Value type.
func SetFloat64Slice(span trace.Span, k string, v []float64) {
	span.SetAttributes(attribute.Float64Slice(k, v))
}

// SetString sets a KeyValue with a STRING Value type.
func SetString(span trace.Span, k string, v string) {
	span.SetAttributes(attribute.String(k, v))
}

// SetStringSlice sets a KeyValue with a STRINGSLICE Value type.
func SetStringSlice(span trace.Span, k string, v []string) {
	span.SetAttributes(attribute.StringSlice(k, v))
}

// Stringer sets a new key-value pair with a passed name and a string
// Setvalue generated by the passed Stringer interface.
func SetStringer(span trace.Span, k string, v fmt.Stringer) {
	span.SetAttributes(attribute.Stringer(k, v))
}
