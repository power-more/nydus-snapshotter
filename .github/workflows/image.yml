name: nydus-snapshotter image

on:
  push:
    branches:
      - 'main'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    branches:
      - 'main'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  ORGANIZATION: ${{ github.repository }}
  CNI_VERSION: v1.1.0
  CRICTL_VERSION: v1.23.0

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Build nydus-snapshotter
        run: |
          make static-release
          cp bin/containerd-nydus-grpc misc/snapshotter
      - name: Log in to container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push nydus-snapshotter image
        run: |
          TAG=$GITHUB_REF_NAME
          [ "$TAG" == "main" ] && TAG="latest"
          [ "$GITHUB_EVENT_NAME" == "pull_request" ] && TAG="local"
          cd misc/snapshotter
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-snapshotter:$TAG .
          # Only push for non pull_request
          if [ "$GITHUB_EVENT_NAME" != "pull_request" ]; then
              docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-snapshotter:$TAG
          fi
      - name: Prepare nydus-snapshotter image test
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          sudo mkdir -p /var/lib/containerd-test/ /etc/containerd/ /opt/cni/bin/ /etc/cni/net.d/
          sudo cp misc/example/containerd-test-config.toml /etc/containerd/
          sudo cp misc/example/crictl.yaml /etc/
          sudo cp misc/example/10-containerd-net.conflist /etc/cni/net.d/
          # install cni plugin
          wget https://github.com/containernetworking/plugins/releases/download/${{ env.CNI_VERSION }}/cni-plugins-linux-amd64-${{ env.CNI_VERSION }}.tgz
          sudo tar xzf cni-plugins-linux-amd64-${{ env.CNI_VERSION }}.tgz -C /opt/cni/bin/
          # install crictl
          wget https://github.com/kubernetes-sigs/cri-tools/releases/download/${{ env.CRICTL_VERSION }}/crictl-${{ env.CRICTL_VERSION }}-linux-amd64.tar.gz
          tar xzf crictl-${{ env.CRICTL_VERSION }}-linux-amd64.tar.gz -C /usr/local/bin/
          # install nydus-overlayfs
          NYDUS_VER=v$(curl -s "https://api.github.com/repos/dragonflyoss/image-service/releases/latest" | jq -r .tag_name | sed 's/^v//')
          wget https://github.com/dragonflyoss/image-service/releases/download/$NYDUS_VER/nydus-static-$NYDUS_VER-linux-amd64.tgz
          tar xzf nydus-static-$NYDUS_VER-linux-amd64.tgz
          sudo cp nydus-static/nydus-overlayfs /usr/local/sbin/
          sudo cp nydus-static/ctr-remote /usr/local/sbin/
          # install containerd
          #CONTAINERD_VER=$(curl -s "https://api.github.com/repos/containerd/containerd/releases/latest" | jq -r .tag_name | sed 's/^v//')
          # Let's use fixed containerd version for now.
          CONTAINERD_VER=1.6.1
          wget https://github.com/containerd/containerd/releases/download/v$CONTAINERD_VER/containerd-$CONTAINERD_VER-linux-amd64.tar.gz
          tar xzf containerd-$CONTAINERD_VER-linux-amd64.tar.gz
          sudo cp bin/* /usr/local/bin/
      - name: Test nydus-snapshotter image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # start nydus-snapshotter
          docker run -d --name snapshotter --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -e CONTAINERD_ROOT=/var/lib/containerd-test -v /var/lib/containerd-test:/var/lib/containerd-test:shared -v ~/.docker/config.json:/root/.docker/config.json:shared ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-snapshotter:local
          # start containerd
          sudo /usr/local/bin/containerd --config /etc/containerd/containerd-test-config.toml -l debug &
          # wait for containerd to start up
          sleep 10
          echo "Pull nydus-latest image"
          sudo crictl pull ghcr.io/dragonflyoss/image-service/ubuntu:nydus-latest
          docker logs `docker ps |grep  "nydus-snapshotter"|cut -d ' ' -f1`
          echo "create new pod with nydus snapshotter"
          sudo crictl run misc/example/container.yaml misc/example/pod.yaml
          container=$(sudo crictl ps -q)
          echo "check container liveness"
          sudo crictl exec $container ls
          echo "delete pod"
          sudo crictl rmp -fa
      - name: Cleanup containerd and snapshotter
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "stop snapshotter"
          docker stop snapshotter
          docker rm snapshotter
          echo "stop containerd"
          sudo pkill -f /usr/local/bin/containerd
          echo "delete containerd dir"
          # After the snapshotter container is stopped, it seems that Nydusd doesn't umount it
          # so we need to umount it here, otherwise you cannot delete this directory. 
          # Frankly, I don't know why Nydusd didn't clean up these resources.
          sudo umount -f /var/lib/containerd-test/io.containerd.snapshotter.v1.nydus/mnt
          sudo rm -rf /var/lib/containerd-test/*
      - name: Test nydus-snapshotter image in localfs mode
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # start nydus-snapshotter
          docker run -d --name snapshotter --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -e BACKEND_TYPE=localfs -e CONTAINERD_ROOT=/var/lib/containerd-test -v /var/lib/containerd-test:/var/lib/containerd-test:shared -v ~/.docker/config.json:/root/.docker/config.json:shared ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-snapshotter:local
          docker_snapshotter=$(docker ps -q)
          # start containerd
          sudo /usr/local/bin/containerd --config /etc/containerd/containerd-test-config.toml -l debug &
          # wait for containerd to start up
          sleep 10
          echo "Pull nydus-latest image"
          sudo crictl pull ghcr.io/dragonflyoss/image-service/ubuntu:nydus-latest
          docker logs `docker ps |grep  "nydus-snapshotter"|cut -d ' ' -f1`
          echo "create new pod with nydus snapshotter"
          sudo crictl run misc/example/container.yaml misc/example/pod.yaml
          container=$(sudo crictl ps -q)
          echo "check container liveness"
          sudo crictl exec $container ls
          echo "delete pod"
          sudo crictl rmp -fa
          echo "delete nydus-latest image"
          sudo crictl rmi ghcr.io/dragonflyoss/image-service/ubuntu:nydus-latest
          echo "check whether the blobs of nydus-latest image has been deleted"
          docker exec -i $docker_snapshotter sh -c 'if [ "`ls -A /tmp/blobs/`" != "" ]; then exit 1; fi'
      - name: Cleanup containerd and snapshotter
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "stop snapshotter"
          docker stop snapshotter
          docker rm snapshotter
          echo "stop containerd"
          sudo pkill -f /usr/local/bin/containerd
          echo "delete containerd dir"
          # After the snapshotter container is stopped, it seems that Nydusd doesn't umount it
          # so we need to umount it here, otherwise you cannot delete this directory. 
          # Frankly, I don't know why Nydusd didn't clean up these resources.
          sudo umount -f /var/lib/containerd-test/io.containerd.snapshotter.v1.nydus/mnt
          sudo rm -rf /var/lib/containerd-test/*
      - name: Test nydus-snapshotter with estargz image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # start nydus-snapshotter
          docker run -d --name snapshotter --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined -e CONTAINERD_ROOT=/var/lib/containerd-test -v /var/lib/containerd-test:/var/lib/containerd-test:shared -v ~/.docker/config.json:/root/.docker/config.json:shared ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/nydus-snapshotter:local
          # start containerd
          sudo /usr/local/bin/containerd --config /etc/containerd/containerd-test-config.toml -l debug &
          # wait for containerd to start up
          sleep 10
          echo "pull estargz image"
          sudo crictl pull ghcr.io/stargz-containers/wordpress:5.9.2-esgz
          docker logs `docker ps |grep  "nydus-snapshotter"|cut -d ' ' -f1`
          echo "create new pod with nydus snapshotter"
          sudo crictl run misc/example/container.yaml misc/example/pod.yaml
          container=$(sudo crictl ps -q)
          echo "check container liveness"
          sudo crictl exec $container ls
          echo "delete pod"
          sudo crictl rmp -fa
